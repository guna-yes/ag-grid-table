{"version":3,"sources":["logo.svg","components/GenderCellRenderer.js","components/NewTable.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["props","console","log","image","value","imageSource","src","NewTable","gridRef","useRef","useState","rowData","setrowData","useEffect","newData","className","style","height","width","ref","resizable","enableBrowserTooltips","onFirstDataRendered","params","api","sizeColumnsToFit","field","tooltipField","display","justifyContent","DeleteButton","data-action","getDatePicker","Datepicker","prototype","init","this","eInput","document","createElement","classList","add","$","datepicker","dateFormat","getGui","afterGuiAttached","focus","select","getValue","destroy","isPopup","Table","setnewData","gridApi","setGridApi","setGridColumnApi","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateParts","split","cellDate","Date","Number","getTime","id","onClick","addIndex","newItems","name","email","gender","DOB","country","city","applyTransaction","selectedRowData","getSelectedRows","remove","setRowData","e","selectedData","current","getSelectedNodes","map","node","data","color","frameworkComponents","genderCellRenderer","GenderCellRenderer","components","datePicker","modules","ClientSideRowModelModule","onCellClicked","column","colId","defaultColDef","sortable","editable","filter","floatingFilter","singleClickEdit","rowSelection","onGridReady","columnApi","checkboxSelection","suppressSizeToFit","cellRenderer","cellEditor","cellEditorParams","values","App","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sNAAe,I,iFCEA,WAACA,GACZC,QAAQC,IAAIF,GACd,IAAMG,EAAwB,SAAhBH,EAAMI,MAAmB,WAAa,aAC9CC,EAAW,yDAAqDF,GACtE,OACE,iCACE,qBAAKG,IAAKD,IACTL,EAAMI,UCFE,SAASG,EAASP,GAC/B,IAAMQ,EAAUC,iBAAO,MADe,EAGRC,mBAAS,IAHD,mBAG/BC,EAH+B,KAGtBC,EAHsB,KAKtCC,qBAAU,WACRD,EAAWZ,EAAMc,WAChB,CAACd,EAAMc,UACVb,QAAQC,IAAIS,GAMZ,OACE,sBAAKI,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,MAAOC,MAAO,QAAhE,UACE,eAAC,cAAD,CACEC,IAAKX,EACLG,QAASA,EACTS,WAAW,EACXC,uBAAuB,EACtBC,oBAXqB,SAACC,GAC3BA,EAAOC,IAAIC,oBAKT,UAOE,cAAC,eAAD,CAAcC,MAAM,KAAKC,aAAa,OACtC,cAAC,eAAD,CAAcD,MAAM,SACpB,cAAC,eAAD,CAAcA,MAAM,UACpB,cAAC,eAAD,CAAcA,MAAM,WACpB,cAAC,eAAD,CAAcA,MAAM,QACpB,cAAC,eAAD,CAAcA,MAAM,YACpB,cAAC,eAAD,CAAcA,MAAM,YAEtB,uBACA,sBACEX,UAAU,SACVC,MAAO,CAAEY,QAAS,OAAQC,eAAgB,UAF5C,qCAKE,iCACE,6DAEF,6BClCR,SAASC,IACP,OACE,8BACE,wBAAQf,UAAU,uBAAuBgB,cAAY,SAArD,SACE,qBACEzB,IAAI,kFACJU,MAAO,CAAEC,OAAQ,OAAQC,MAAO,cAO1C,SAASc,IACP,SAASC,KAsBT,OArBAA,EAAWC,UAAUC,KAAO,SAAUZ,GACpCa,KAAKC,OAASC,SAASC,cAAc,SACrCH,KAAKC,OAAOjC,MAAQmB,EAAOnB,MAC3BgC,KAAKC,OAAOG,UAAUC,IAAI,YAC1BL,KAAKC,OAAOrB,MAAMC,OAAS,OAC3ByB,IAAEN,KAAKC,QAAQM,WAAW,CAAEC,WAAY,cAE1CX,EAAWC,UAAUW,OAAS,WAC5B,OAAOT,KAAKC,QAEdJ,EAAWC,UAAUY,iBAAmB,WACtCV,KAAKC,OAAOU,QACZX,KAAKC,OAAOW,UAEdf,EAAWC,UAAUe,SAAW,WAC9B,OAAOb,KAAKC,OAAOjC,OAErB6B,EAAWC,UAAUgB,QAAU,aAC/BjB,EAAWC,UAAUiB,QAAU,WAC7B,OAAO,GAEFlB,EAGM,SAASmB,IAAS,IAAD,EACA1C,mBAAS,IADT,mBACvBI,EADuB,KACduC,EADc,KAExB7C,EAAUC,iBAAO,MAFO,EAGAC,mBAAS,MAHT,mBAGvB4C,EAHuB,KAGdC,EAHc,OAIY7C,mBAAS,MAJrB,mBAIR8C,GAJQ,WA0CxBC,EAAe,CACnBC,WAAY,SAACC,EAA2BC,GACtC,IACMC,EADeD,EACUE,MAAM,KAC/BC,EAAW,IAAIC,KACnBC,OAAOJ,EAAU,IACjBI,OAAOJ,EAAU,IAAM,EACvBI,OAAOJ,EAAU,KAEnB,OAAIF,EAA0BO,YAAcH,EAASG,UAC5C,EAELH,EAAWJ,GACL,EAENI,EAAWJ,EACN,OADT,IAyDJ,OACE,qBAAK3C,MAAO,CAAEE,MAAO,OAAQD,OAAQ,QAArC,SACE,sBACEkD,GAAG,SACHnD,MAAO,CAAEE,MAAO,OAAQD,OAAQ,OAChCF,UAAU,kBAHZ,UAKE,yBAAQA,UAAU,WAAWqD,QA7ClB,SAACC,GAChB,IAAIC,EAAW,CAbD,CACZH,GAAI,KACJI,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,IAAK,MACLC,QAAS,UACTC,KAAM,SAOEtB,EAAQuB,iBAAiB,CACjCpC,IAAK6B,EACLD,SAAUA,KAyCR,oBACU,OAEV,wBAAQtD,UAAU,WAAWqD,QA9BV,WACvB,IAAIU,EAAkBxB,EAAQyB,kBAC9BzB,EAAQuB,iBAAiB,CAAEG,OAAQF,KA4B/B,iCAGA,yBAAQ/D,UAAU,WAAWqD,QA7BP,WAC1B,IAAIU,EAAkBxB,EAAQyB,kBAC9BzB,EAAQ2B,WAAWH,IA2Bf,oCAC0B,OAE1B,yBAAQ/D,UAAU,WAAWqD,QA1Cb,SAACc,GACrB,IACMC,EADgB3E,EAAQ4E,QAAQ5D,IAAI6D,mBACPC,KAAI,SAACC,GAAD,OAAUA,EAAKC,QACtDnC,EAAW8B,IAuCP,mBACS,OAGT,eAAC,cAAD,CACE7D,oBAzBoB,SAACC,GAC3BA,EAAOC,IAAIC,oBAyBLT,MAAO,CAAEyE,MAAO,OAChBtE,IAAKX,EACLG,QArIQ,CACd,CACEwD,GAAI,IACJI,KAAM,YACNC,MAAO,iBACPC,OAAQ,OACRC,IAAK,aACLC,QAAS,QACTC,KAAM,cAER,CACET,GAAI,IACJI,KAAM,OACNC,MAAO,kBACPC,OAAQ,SACRC,IAAK,aACLC,QAAS,MACTC,KAAM,UAER,CACET,GAAI,IACJI,KAAM,SACNC,MAAO,mBACPC,OAAQ,OACRC,IAAK,aACLC,QAAS,YACTC,KAAM,kBA4GFxD,WAAW,EACXC,uBAAuB,EACvBqE,oBAAqB,CACnBC,mBAAoBC,EACpB9D,aAAcA,GAEhB+D,WAAY,CAAEC,WAAY9D,KAC1B+D,QAASC,2BACTC,cA5CR,SAAuB1E,GACO,WAAxBA,EAAO2E,OAAOC,OAChB5E,EAAOC,IAAIqD,iBAAiB,CAC1BG,OAAQ,CAACzD,EAAOgE,KAAKC,SA0CnBY,cAjHc,CACpBC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,EAChBC,iBAAiB,GA6GXC,aAAa,WACbC,YAnEY,SAACpF,GACnBgC,EAAWhC,EAAOC,KAClBgC,EAAiBjC,EAAOqF,YAiDpB,UAkBE,cAAC,eAAD,CAAclF,MAAM,KAAKmF,mBAAmB,EAAMlF,aAAa,OAC/D,cAAC,eAAD,CACED,MAAM,OACNoF,mBAAmB,EACnBR,UAAU,EACV3E,aAAa,SAEf,cAAC,eAAD,CAAcD,MAAM,QAAQ4E,UAAU,EAAM3E,aAAa,UACzD,cAAC,eAAD,CACEA,aAAa,SACbD,MAAM,SACN4E,UAAU,EACVG,iBAAiB,EACjBM,aAAa,qBACbC,WAAW,qBACXC,iBAAkB,CAChBC,OAAQ,CAAC,OAAQ,UACjBF,WAAY,wBAGhB,cAAC,eAAD,CACErF,aAAa,MACbD,MAAM,MACN+E,iBAAiB,EACjBH,UAAU,EACVU,WAAW,aACXT,OAAO,qBACP9C,aAAcA,IAEhB,cAAC,eAAD,CACE9B,aAAa,UACbD,MAAM,UACN4E,UAAU,EACVU,WAAW,qBACXP,iBAAiB,EACjBQ,iBAAkB,CAChBC,OAAQ,CAAC,MAAO,QAAS,aACzBF,WAAY,wBAGhB,cAAC,eAAD,CAActF,MAAM,OAAO4E,UAAU,IACrC,cAAC,eAAD,CACE5E,MAAM,SACN4E,UAAU,EACVE,gBAAgB,EAChBO,aAAa,oBAGjB,uBACA,gDACA,uBACA,cAACxG,EAAD,CAAUO,QAASA,SC/OZqG,MATf,WACE,OACE,sBAAKpG,UAAU,MAAMC,MAAO,CAAEoG,QAAS,OAAvC,UACE,yDACA,cAAC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1F,SAAS2F,eAAe,SAM1BZ,M","file":"static/js/main.849bf6e4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nexport default (props) => {\r\n    console.log(props);\r\n  const image = props.value === 'Male' ? 'male.png' : 'female.png';\r\n  const imageSource = `https://www.ag-grid.com/example-assets/genders/${image}`;\r\n  return (\r\n    <span>\r\n      <img src={imageSource} />\r\n      {props.value}\r\n    </span>\r\n \r\n  );\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { AgGridReact, AgGridColumn } from \"ag-grid-react\";\r\nimport \"ag-grid-enterprise\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nexport default function NewTable(props) {\r\n  const gridRef = useRef(null);\r\n\r\n  const [rowData, setrowData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setrowData(props.newData);\r\n  }, [props.newData]);\r\n  console.log(rowData);\r\n\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: \"50%\", width: \"100%\" }}>\r\n      <AgGridReact\r\n        ref={gridRef}\r\n        rowData={rowData}\r\n        resizable={true}\r\n        enableBrowserTooltips={true}\r\n         onFirstDataRendered={onFirstDataRendered}\r\n      >\r\n        <AgGridColumn field=\"id\" tooltipField=\"id\" />\r\n        <AgGridColumn field=\"name\" />\r\n        <AgGridColumn field=\"email\" />\r\n        <AgGridColumn field=\"gender\" />\r\n        <AgGridColumn field=\"DOB\" />\r\n        <AgGridColumn field=\"country\" />\r\n        <AgGridColumn field=\"city\" />\r\n      </AgGridReact>\r\n      <br />\r\n      <div\r\n        className=\"footer\"\r\n        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n      >\r\n        @Assignment done by &nbsp;\r\n        <strong>\r\n          <em>Settivaripalli Gunasekhar</em>\r\n        </strong>\r\n        <br />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// 'use strict';\r\nimport React, { useRef, useState } from \"react\";\r\nimport { AgGridReact, AgGridColumn } from \"ag-grid-react\";\r\nimport \"ag-grid-enterprise\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nimport { ClientSideRowModelModule } from \"ag-grid-community\";\r\nimport $ from \"jquery\";\r\nimport \"jquery-ui/ui/widgets/datepicker\";\r\nimport GenderCellRenderer from \"./GenderCellRenderer.js\";\r\nimport NewTable from \"./NewTable\";\r\n\r\nfunction DeleteButton() {\r\n  return (\r\n    <div>\r\n      <button className=\"action-button delete\" data-action=\"delete\">\r\n        <img\r\n          src=\"https://cdn.iconscout.com/icon/premium/png-256-thumb/delete-1432400-1211078.png\"\r\n          style={{ height: \"25px\", width: \"25px\" }}\r\n        ></img>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getDatePicker() {\r\n  function Datepicker() {}\r\n  Datepicker.prototype.init = function (params) {\r\n    this.eInput = document.createElement(\"input\");\r\n    this.eInput.value = params.value;\r\n    this.eInput.classList.add(\"ag-input\");\r\n    this.eInput.style.height = \"100%\";\r\n    $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n  };\r\n  Datepicker.prototype.getGui = function () {\r\n    return this.eInput;\r\n  };\r\n  Datepicker.prototype.afterGuiAttached = function () {\r\n    this.eInput.focus();\r\n    this.eInput.select();\r\n  };\r\n  Datepicker.prototype.getValue = function () {\r\n    return this.eInput.value;\r\n  };\r\n  Datepicker.prototype.destroy = function () {};\r\n  Datepicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Datepicker;\r\n}\r\n\r\nexport default function Table() {\r\n  const [newData, setnewData] = useState([]);\r\n  const gridRef = useRef(null);\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const rowData = [\r\n    {\r\n      id: \"1\",\r\n      name: \"John Snow\",\r\n      email: \"john@gmail.com\",\r\n      gender: \"Male\",\r\n      DOB: \"02/10/1998\",\r\n      country: \"India\",\r\n      city: \"WinterFell\",\r\n    },\r\n    {\r\n      id: \"2\",\r\n      name: \"Arya\",\r\n      email: \"aarya@gmail.com\",\r\n      gender: \"Female\",\r\n      DOB: \"02/10/1998\",\r\n      country: \"USA\",\r\n      city: \"Bravos\",\r\n    },\r\n    {\r\n      id: \"3\",\r\n      name: \"Tyrion\",\r\n      email: \"tyrion@gmail.com\",\r\n      gender: \"Male\",\r\n      DOB: \"02/10/1998\",\r\n      country: \"Australia\",\r\n      city: \"Kings Landing\",\r\n    },\r\n  ];\r\n\r\n  const defaultColDef = {\r\n    sortable: true,\r\n    editable: true,\r\n    filter: true,\r\n    floatingFilter: true,\r\n    singleClickEdit: true,\r\n  };\r\n  const filterParams = {\r\n    comparator: (filterLocalDateAtMidnight, cellValue) => {\r\n      const dateAsString = cellValue;\r\n      const dateParts = dateAsString.split(\"/\");\r\n      const cellDate = new Date(\r\n        Number(dateParts[2]),\r\n        Number(dateParts[1]) - 1,\r\n        Number(dateParts[0])\r\n      );\r\n      if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\r\n        return 0;\r\n      }\r\n      if (cellDate < filterLocalDateAtMidnight) {\r\n        return -1;\r\n      }\r\n      if (cellDate > filterLocalDateAtMidnight) {\r\n        return 1;\r\n      }\r\n    },\r\n  };\r\n\r\n  function createNewRowData() {\r\n    var newData = {\r\n      id: \"id\",\r\n      name: \"Name\",\r\n      email: \"Email\",\r\n      gender: \"Gender\",\r\n      DOB: \"DOB\",\r\n      country: \"Country\",\r\n      city: \"City\",\r\n    };\r\n    return newData;\r\n  }\r\n\r\n  const addItems = (addIndex) => {\r\n    var newItems = [createNewRowData()];\r\n    var res = gridApi.applyTransaction({\r\n      add: newItems,\r\n      addIndex: addIndex,\r\n    });\r\n  };\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n  };\r\n\r\n  const onButtonClick = (e) => {\r\n    const selectedNodes = gridRef.current.api.getSelectedNodes();\r\n    const selectedData = selectedNodes.map((node) => node.data);\r\n    setnewData(selectedData);\r\n  };\r\n\r\n  const onRemoveSelected = () => {\r\n    var selectedRowData = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRowData });\r\n  };\r\n  const onRemoveNonSelected = () => {\r\n    var selectedRowData = gridApi.getSelectedRows();\r\n    gridApi.setRowData(selectedRowData);\r\n  };\r\n\r\n  function onCellClicked(params) {\r\n    if (params.column.colId === \"action\") {\r\n      params.api.applyTransaction({\r\n        remove: [params.node.data],\r\n      });\r\n    }\r\n  }\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <div\r\n        id=\"myGrid\"\r\n        style={{ width: \"100%\", height: \"45%\" }}\r\n        className=\"ag-theme-alpine\"\r\n      >\r\n        <button className=\"button_1\" onClick={addItems}>\r\n          Add Row{\" \"}\r\n        </button>\r\n        <button className=\"button_1\" onClick={onRemoveSelected}>\r\n          Delete selected Row\r\n        </button>\r\n        <button className=\"button_1\" onClick={onRemoveNonSelected}>\r\n          Delete Non Selected Row{\" \"}\r\n        </button>\r\n        <button className=\"button_1\" onClick={onButtonClick}>\r\n          Submit{\" \"}\r\n        </button>\r\n\r\n        <AgGridReact\r\n          onFirstDataRendered={onFirstDataRendered}\r\n          style={{ color: \"red\" }}\r\n          ref={gridRef}\r\n          rowData={rowData}\r\n          resizable={true}\r\n          enableBrowserTooltips={true}\r\n          frameworkComponents={{\r\n            genderCellRenderer: GenderCellRenderer,\r\n            DeleteButton: DeleteButton,\r\n          }}\r\n          components={{ datePicker: getDatePicker() }}\r\n          modules={ClientSideRowModelModule}\r\n          onCellClicked={onCellClicked}\r\n          defaultColDef={defaultColDef}\r\n          rowSelection=\"multiple\"\r\n          onGridReady={onGridReady}\r\n        >\r\n          <AgGridColumn field=\"id\" checkboxSelection={true} tooltipField=\"id\" />\r\n          <AgGridColumn\r\n            field=\"name\"\r\n            suppressSizeToFit={true}\r\n            editable={true}\r\n            tooltipField=\"name\"\r\n          />\r\n          <AgGridColumn field=\"email\" editable={true} tooltipField=\"email\" />\r\n          <AgGridColumn\r\n            tooltipField=\"gender\"\r\n            field=\"gender\"\r\n            editable={true}\r\n            singleClickEdit={true}\r\n            cellRenderer=\"genderCellRenderer\"\r\n            cellEditor=\"agSelectCellEditor\"\r\n            cellEditorParams={{\r\n              values: [\"Male\", \"Female\"],\r\n              cellEditor: \"genderCellRenderer\",\r\n            }}\r\n          />\r\n          <AgGridColumn\r\n            tooltipField=\"DOB\"\r\n            field=\"DOB\"\r\n            singleClickEdit={true}\r\n            editable={true}\r\n            cellEditor=\"datePicker\"\r\n            filter=\"agDateColumnFilter\"\r\n            filterParams={filterParams}\r\n          />\r\n          <AgGridColumn\r\n            tooltipField=\"country\"\r\n            field=\"country\"\r\n            editable={true}\r\n            cellEditor=\"agSelectCellEditor\"\r\n            singleClickEdit={true}\r\n            cellEditorParams={{\r\n              values: [\"USA\", \"India\", \"Australia\"],\r\n              cellEditor: \"agSelectCellEditor\",\r\n            }}\r\n          />\r\n          <AgGridColumn field=\"city\" editable={true} />\r\n          <AgGridColumn\r\n            field=\"action\"\r\n            editable={false}\r\n            floatingFilter={false}\r\n            cellRenderer=\"DeleteButton\"\r\n          />\r\n        </AgGridReact>\r\n        <br />\r\n        <h1>Submitted Data</h1>\r\n        <br />\r\n        <NewTable newData={newData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Table from \"./components/Table\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ padding: \"1em\" }}>\n      <h1>Top Rankers Assignments</h1>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}